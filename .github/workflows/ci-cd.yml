name: My Scratch Pad CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: my-scratch-pad

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Install dependencies
      run: |
        uv sync
        
    - name: Initialize database
      run: |
        uv run python init_db.py
        
    - name: Run tests
      run: |
        uv run python -m unittest test_app.py -v
        
    - name: Test Docker build
      run: |
        docker build -t test-image .
        docker run --rm test-image python -c "import app; print('Application imports successfully')"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image for scanning
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:scan .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:scan'
        format: 'table'
        exit-code: '0'

  build-and-push:
    name: Build and Push Docker Image
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Verify image
      run: |
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest python -c "import app; print('Published image verification successful')"

  performance-test:
    name: Basic Performance Test
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build and start container
      run: |
        docker build -t test-perf .
        docker run -d --name perf-test -p 5001:5001 test-perf
        
    - name: Wait for application
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:5001; do sleep 1; done'
        
    - name: Run basic performance test
      run: |
        echo "Running 30-second performance test..."
        for i in {1..30}; do
          response_time=$(curl -o /dev/null -s -w "%{time_total}" http://localhost:5001)
          echo "Response time: ${response_time}s"
          sleep 1
        done
        
    - name: Cleanup
      if: always()
      run: |
        docker stop perf-test || true
        docker rm perf-test || true

  deploy:
    name: Deploy Notification
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deployment notification
      run: |
        echo "ðŸš€ My Scratch Pad has been successfully built and pushed to Docker Hub!"
        echo "Image: ${{ secrets.DOCKERHUB_USERNAME }}/my-scratch-pad:latest"
        echo "Available at: https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/my-scratch-pad"
        echo ""
        echo "To run locally:"
        echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-scratch-pad:latest"
        echo "docker run -p 5001:5001 ${{ secrets.DOCKERHUB_USERNAME }}/my-scratch-pad:latest"